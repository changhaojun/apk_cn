{"version":3,"sources":["webpack:///./src/app/settings/settings.module.ts","webpack:///./src/app/settings/settings.page.html","webpack:///./src/app/settings/settings.page.scss","webpack:///./src/app/settings/settings.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEE;AAC/C,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,2DAAY;KACxB;CACF,CAAC;AAWF;IAAA;IAAiC,CAAC;IAArB,kBAAkB;QAT9B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,2DAAY,CAAC;SAC7B,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAA;AAAH;;;;;;;;;;;;ACxB/B,yqE;;;;;;;;;;;ACAA,+DAA+D,2I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAd;AACjD,qDAAqD;AACH;AACc;AACS;AAC1B;AACiB;AAQhE;IAEE,sBACS,OAAsB,EACtB,eAAgC,EAChC,OAA8B,EAC9B,IAAkB,EAClB,SAA0B;IACjC,4BAA4B;;QALrB,YAAO,GAAP,OAAO,CAAe;QACtB,oBAAe,GAAf,eAAe,CAAiB;QAChC,YAAO,GAAP,OAAO,CAAuB;QAC9B,SAAI,GAAJ,IAAI,CAAc;QAClB,cAAS,GAAT,SAAS,CAAiB;IAE/B,CAAC;IAEL,+BAAQ,GAAR;IACA,CAAC;IAED,mCAAY,GAAZ;QACE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;IACpD,CAAC;IACD,iCAAU,GAAV;QACE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;IAClD,CAAC;IACD,6CAAsB,GAAtB;QACE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,CAAC;IAC/D,CAAC;IACD,iCAAU,GAAV;QACE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;IAClD,CAAC;IACK,qDAA8B,GAApC;;;;;;4BACgB,qBAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;4BAC9C,MAAM,EAAE,wBAAwB;4BAChC,OAAO,EAAE,4CAA4C;4BACrD,OAAO,EAAE;gCACP;oCACE,IAAI,EAAE,QAAQ;oCACd,IAAI,EAAE,QAAQ;oCACd,OAAO,EAAE;wCACP,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oCAChC,CAAC;iCACF,EAAE;oCACD,IAAI,EAAE,OAAO;oCACb,OAAO,EAAE;;;;;oDACD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC;oDAC3B,CAAC,GAAG,CAAC;;;yDAAE,KAAI,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM;oDAC/B,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oDACpB,qBAAM,IAAI,CAAC,OAAO,CAAC,2BAA2B,CAAC,GAAG,CAAC,EAAE,CAAC;;oDAAtD,SAAsD,CAAC;oDACvD,qBAAM,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,GAAG,CAAC,EAAE,CAAC;;oDAAxD,SAAwD,CAAC;oDACzD,qBAAM,IAAI,CAAC,OAAO,CAAC,0BAA0B,CAAC,GAAG,CAAC,EAAE,CAAC;;oDAArD,SAAqD,CAAC;;;oDAJf,CAAC,EAAE;;;;;yCAM7C;iCACF;6BACF;yBACF,CAAC;;wBAvBI,KAAK,GAAG,SAuBZ;wBACF,qBAAM,KAAK,CAAC,OAAO,EAAE;;wBAArB,SAAqB,CAAC;;;;;KACvB;IAED,aAAa;IACb,mCAAmC;IACnC,iCAAiC;IACjC,OAAO;IACP,IAAI;IAEJ,gDAAyB,GAAzB,UAA0B,EAAE;QAC1B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC;QACtD,IAAI,CAAC,OAAO,CAAC,UAAU,cAAK,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IAC/C,CAAC;IAEK,uCAAgB,GAAtB;;;;;;;wBAKQ,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;wBACvF,qBAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;gCACxC,SAAS,EAAE,wDAAQ;gCACnB,cAAc,EAAE;oCACd,UAAU,EAAE,IAAI;oCAChB,iBAAiB,EAAE,iBAAiB;iCACrC;gCACD,QAAQ,EAAE,mBAAmB;gCAC7B,YAAY,EAAE,KAAK;6BACpB,CAAC;;wBARI,KAAK,GAAG,SAQZ;wBACF,KAAK,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;4BAC7B,0BAA0B;4BAC1B,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;4BAC1B,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;gCACpD,KAAI,CAAC,qBAAqB,EAAE,CAAC;6BAC9B;wBACH,CAAC,CAAC,CAAC;wBACI,qBAAM,KAAK,CAAC,OAAO,EAAE;4BAA5B,sBAAO,SAAqB,EAAC;;;;KAC9B;IAEK,4CAAqB,GAA3B,UAA4B,MAAiB;;;;;4BAE7B,qBAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;4BACxC,SAAS,EAAE,yEAAa;4BACxB,cAAc,EAAE;gCACd,MAAM,EAAE,MAAM,CAAC,CAAC,cACX,MAAM,EACT,CAAC,CAAC,IAAI;6BACT;yBACF,CAAC;;wBAPI,KAAK,GAAG,SAOZ;wBAIK,qBAAM,KAAK,CAAC,OAAO,EAAE;;oBAH7B;;2BAEO;oBACN,sBAAO,SAAqB,EAAC;;;;KAC9B;IAzGU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,kGAAmC;;SAEpC,CAAC;yCAIkB,4DAAa;YACL,8DAAe;YACvB,iEAAqB;YACxB,wDAAY;YACP,8DAAe;YACjC,4BAA4B;;OARnB,YAAY,CA0GxB;IAAD,mBAAC;CAAA;AA1GwB","file":"settings-settings-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SettingsPage } from './settings.page';\nconst routes: Routes = [\n  {\n    path: '',\n    component: SettingsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [SettingsPage]\n})\nexport class SettingsPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Settings</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <ion-list>\\n    <ion-item button detail=\\\"false\\\" (click)=\\\"navToDevices()\\\">\\n      <ion-icon src=\\\"/assets/icon/shower-solid.svg\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label text-wrap>\\n        Devices\\n      </ion-label>\\n    </ion-item>\\n    <ion-item button detail=\\\"false\\\" (click)=\\\"navToUnits()\\\">\\n      <ion-icon name=\\\"thermometer\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label text-wrap>\\n        Units\\n      </ion-label>\\n    </ion-item>\\n    <ion-item button detail=\\\"false\\\" (click)=\\\"navToConsumptionRanges()\\\">\\n      <ion-icon src=\\\"/assets/icon/smile-regular.svg\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label text-wrap>\\n        Cost ranges\\n      </ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-icon name=\\\"notifications\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label text-wrap>\\n        Allow notifications\\n      </ion-label>\\n      <ion-toggle slot=\\\"end\\\" (ionChange)=\\\"notificationToggleChanged($event)\\\" [(ngModel)]=\\\"data.user.allowNotifications\\\"></ion-toggle>\\n    </ion-item>\\n    <ion-item button detail=\\\"false\\\" (click)=\\\"presentClearMesurementsConfirm()\\\">\\n      <ion-icon name=\\\"trash\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label text-wrap>\\n        Clear measurement data\\n      </ion-label>\\n    </ion-item>\\n    <ion-item button detail=\\\"false\\\" (click)=\\\"presentHelpModal()\\\">\\n      <ion-icon name=\\\"help-circle-outline\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label text-wrap>\\n        Help\\n      </ion-label>\\n    </ion-item>\\n    <ion-item button detail=\\\"false\\\" (click)=\\\"navToAbout()\\\">\\n      <ion-icon name=\\\"information-circle-outline\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label text-wrap>\\n        About\\n      </ion-label>\\n    </ion-item>\\n    <!-- <ion-item button detail=\\\"false\\\" (click)=\\\"logout()\\\">\\n      <ion-icon name=\\\"log-out\\\" slot=\\\"start\\\"></ion-icon>\\n      <ion-label text-wrap>\\n        Logout\\n      </ion-label>\\n    </ion-item> -->\\n  </ion-list>\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NldHRpbmdzL3NldHRpbmdzLnBhZ2Uuc2NzcyJ9 */\"","import { ModalController } from '@ionic/angular';\n// import { AuthProvider } from './../../providers/';\nimport { Component, OnInit } from '@angular/core';\nimport { NavController, AlertController } from '@ionic/angular';\nimport { LocalDatabaseProvider, DataProvider } from './../../providers/';\nimport { HelpPage } from './../help/help.page';\nimport { AddDevicePage } from './../add-device/add-device.page';\nimport { Device } from './../../models/device';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.page.html',\n  styleUrls: ['./settings.page.scss'],\n})\nexport class SettingsPage implements OnInit {\n\n  constructor(\n    public navCtrl: NavController,\n    public alertController: AlertController,\n    public localDb: LocalDatabaseProvider,\n    public data: DataProvider,\n    public modalCtrl: ModalController\n    // public auth: AuthProvider\n  ) { }\n\n  ngOnInit() {\n  }\n\n  navToDevices() {\n    this.navCtrl.navigateForward('/settings/devices');\n  }\n  navToUnits() {\n    this.navCtrl.navigateForward('/settings/units');\n  }\n  navToConsumptionRanges() {\n    this.navCtrl.navigateForward('/settings/consumption-ranges');\n  }\n  navToAbout() {\n    this.navCtrl.navigateForward('/settings/about');\n  }\n  async presentClearMesurementsConfirm() {\n    const alert = await this.alertController.create({\n      header: 'Clear measurement data',\n      message: 'Do you want to clear all measurement data?',\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel',\n          handler: () => {\n            console.log('cancel clicked');\n          }\n        }, {\n          text: 'Clear',\n          handler: async () => {\n            const devs = this.data.user.devices;\n            for (let i = 0; devs && i < devs.length; i++) {\n              const dev = devs[i];\n              await this.localDb.clearMeasurementsByDeviceId(dev.id);\n              await this.localDb.deleteDeviceClosedMeasurement(dev.id);\n              await this.localDb.addDeviceClosedMeasurement(dev.id);\n            }\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  // logout() {\n  //   this.auth.logout().then(()=> {\n  //     console.log('logged out');\n  //   })\n  // }\n\n  notificationToggleChanged(ev) {\n    console.log(ev.detail.checked);\n    this.data.user.allowNotifications = ev.detail.checked;\n    this.localDb.updateUser({...this.data.user});\n  }\n\n  async presentHelpModal() {\n    // if (this.backButtonSub) {\n    //   this.backButtonSub.unsubscribe();\n    // }\n\n    const isDeviceListEmpty = this.data.user.devices && this.data.user.devices.length > 0 ? false : true;\n    const modal = await this.modalCtrl.create({\n      component: HelpPage,\n      componentProps: {\n        onboarding: true,\n        isDeviceListEmpty: isDeviceListEmpty\n      },\n      cssClass: 'transparent-modal',\n      showBackdrop: false\n    });\n    modal.onDidDismiss().then((data) => {\n      //this.setBackButtonSub();\n      console.log('data', data);\n      if (data && data.data && data.data.isDeviceListEmpty) {\n        this.presentAddDeviceModal();\n      }\n    });\n    return await modal.present();\n  }\n\n  async presentAddDeviceModal(device ? : Device) {\n    //this.ionViewWillLeave()\n    const modal = await this.modalCtrl.create({\n      component: AddDevicePage,\n      componentProps: {\n        device: device ? {\n          ...device\n        } : null\n      }\n    });\n   /*  modal.onDidDismiss().then(() => {\n      this.ionViewWillEnter();\n    }); */\n    return await modal.present();\n  }\n}\n"],"sourceRoot":""}